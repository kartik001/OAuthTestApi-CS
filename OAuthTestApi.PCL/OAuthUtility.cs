/*
 * OAuthTestApi.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 02/12/2016
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using OAuthTestApi.PCL.Http.Request;

namespace OAuthTestApi.PCL
{
    internal class OAuthUtility
    {
        const string OAUTH_TOKEN = "oauth_token";
        const string OAUTH_CONSUMER_KEY = "oauth_consumer_key";
        const string OAUTH_NONCE = "oauth_nonce";
        const string OAUTH_TIMESTAMP = "oauth_timestamp";
        const string OAUTH_SIGNATURE = "oauth_signature";
        const string OAUTH_SIGNATURE_METHOD = "oauth_signature_method";
        const string OAUTH_VERSION = "oauth_version";
        const string OAUTH_VERSION_NO = "1.0";
        const string HMAC_SHA1 = "HMAC-SHA1";
        const string OAUTH_HEADER_FORMAT = "OAuth {0}";
        const string OAUTH_HEADER_NAME = "Authorization";

        /// <summary>
        /// Appends the necessary OAuth credentials for making this authorized call
        /// </summary>
        /// <param name="request">The out going request to access the resource</param>        
        internal static void AppendOAuthParams(HttpRequest request)
        {
            if (string.IsNullOrWhiteSpace(Configuration.OAuthClientId))
            {
                throw new ArgumentNullException("OAuthClientId");
            }
            else if (string.IsNullOrWhiteSpace(Configuration.OAuthClientSecret))
            {
                throw new ArgumentNullException("OAuthClientSecret");
            }
            else if (string.IsNullOrWhiteSpace(Configuration.OAuthToken))
            {
                throw new ArgumentNullException("OAuthToken");
            }
            else if (string.IsNullOrWhiteSpace(Configuration.OAuthTokenSecret))
            {
                throw new ArgumentNullException("OAuthTokenSecret");
            }

            Random random = new Random();

            var parameters = new Dictionary<string, String>();
            parameters.Add(OAUTH_CONSUMER_KEY, Configuration.OAuthClientId);            
            parameters.Add(OAUTH_NONCE, random.Next().ToString());
            parameters.Add(OAUTH_TIMESTAMP, getUnixTimeString());
            parameters.Add(OAUTH_SIGNATURE_METHOD, HMAC_SHA1);
            parameters.Add(OAUTH_VERSION, OAUTH_VERSION_NO);
            parameters.Add(OAUTH_TOKEN, Configuration.OAuthToken);

            var signature = generateSignature(
                Configuration.OAuthClientSecret,
                new Uri(request.QueryUrl),
                request.HttpMethod.ToString(),
                Configuration.OAuthTokenSecret,
                parameters);

            parameters.Add(OAUTH_SIGNATURE, signature);

            var authHeaderVal = joinForHeader(parameters);

            parameters.Add(OAUTH_HEADER_NAME, string.Format(OAUTH_HEADER_FORMAT, authHeaderVal));

            request.Headers = request.Headers.Concat(parameters).ToDictionary(x=>x.Key,x=>x.Value);;
        }

        private static string generateSignature(string consumerSecret, Uri uri,
            string method, string tokenSecret, IEnumerable<KeyValuePair<string, String>> parameters)
        {
            var hmacKeyBase = urlEncode(consumerSecret) + "&" + urlEncode(tokenSecret);

            var queryParams = parseQueryString(uri.GetComponents(UriComponents.Query | UriComponents.KeepDelimiter, UriFormat.UriEscaped));
            var stringParameter = formatQueryString(parameters.Concat(queryParams));            

            var signatureBase = method.ToString() +
                "&" + urlEncode(uri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path, UriFormat.Unescaped)) +
                "&" + urlEncode(stringParameter);

            var hash = computeHash(Encoding.UTF8.GetBytes(hmacKeyBase), Encoding.UTF8.GetBytes(signatureBase));
            return urlEncode(Convert.ToBase64String(hash));
        }

        private static byte[] computeHash(byte[] key, byte[] buffer)
        {
            HMACSHA1 hmac = new HMACSHA1(key);
            return hmac.ComputeHash(buffer);
        }

        private static string getUnixTimeString()
        {
            DateTime unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            return ((long)(DateTime.UtcNow - unixEpoch).TotalSeconds).ToString();
        }

        /// <summary>Escape RFC3986 String</summary>
        private static string urlEncode(string stringToEscape)
        {
            return Uri.EscapeDataString(stringToEscape)
                .Replace("!", "%21")
                .Replace("*", "%2A")
                .Replace("'", "%27")
                .Replace("(", "%28")
                .Replace(")", "%29");
        }

        private static string urlDecode(string stringToUnescape)
        {
            stringToUnescape = stringToUnescape.Replace("+", " ");
            return Uri.UnescapeDataString(stringToUnescape)
                .Replace("%21", "!")
                .Replace("%2A", "*")
                .Replace("%27", "'")
                .Replace("%28", "(")
                .Replace("%29", ")");
        }

        private static string formatQueryString(IEnumerable<KeyValuePair<string, string>> parameters)
        {
            var stringParameters = parameters
                .Where(x => x.Key.ToLower() != "realm")
                .Select(p => new { Key = urlEncode(p.Key), Value = urlEncode((string) p.Value) })
                .OrderBy(p => p.Key, StringComparer.Ordinal)
                .ThenBy(p => p.Value, StringComparer.Ordinal)
                .Select(p => p.Key + "=" + p.Value);

            return string.Join("&", stringParameters);
        }

        private static IEnumerable<KeyValuePair<string, string>> parseQueryString(string query)
        {
            //query is optional for an API call, so it may be null
            if(string.IsNullOrEmpty(query))
                return Enumerable.Empty<KeyValuePair<string, string>>();

            var queryParams = query.TrimStart('?').Split('&')
               .Where(x => x != "")
               .Select(x =>
               {
                   var xs = x.Split('=');
                   return new KeyValuePair<string, string>(urlDecode(xs[0]), urlDecode(xs[1]));
               });

            return queryParams;
        }

        private static string joinForHeader(Dictionary<string, string> parameters)
        {
            IEnumerable<string> keyValPairs = parameters.Select(p => string.Format("{0}=\"{1}\"", p.Key, p.Value));
            var joinedHeader = string.Join(",", keyValPairs);
            return joinedHeader;
        }
    }
}
